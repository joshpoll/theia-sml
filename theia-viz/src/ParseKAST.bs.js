// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function point(json) {
  return /* record */[
          /* x */Json_decode.field("x", Json_decode.$$int, json),
          /* y */Json_decode.field("y", Json_decode.$$int, json)
        ];
}

function line(json) {
  return /* record */[
          /* start */Json_decode.field("start", point, json),
          /* end_ */Json_decode.field("end", point, json),
          /* thickness */Json_decode.optional((function (param) {
                  return Json_decode.field("thickness", Json_decode.$$int, param);
                }), json)
        ];
}

var Decode = /* module */[
  /* point */point,
  /* line */line
];

var data = " {\n  \"start\": { \"x\": 1, \"y\": -4 },\n  \"end\":   { \"x\": 5, \"y\": 8 }\n} ";

var line$1 = line(Json.parseOrRaise(data));

var idJson = " {\n  \"format\": \"KAST\",\n  \"version\": 1,\n  \"term\": {\n    \"node\": \"KApply\",\n    \"label\": \"<k>\",\n    \"variable\": false,\n    \"arity\": 1,\n    \"args\": [\n      {\n        \"node\": \"KApply\",\n        \"label\": \"lambda_.__LAMBDA\",\n        \"variable\": false,\n        \"arity\": 2,\n        \"args\": [\n          {\n            \"node\": \"KToken\",\n            \"sort\": \"KVar\",\n            \"token\": \"x\"\n          },\n          {\n            \"node\": \"KToken\",\n            \"sort\": \"KVar\",\n            \"token\": \"x\"\n          }\n        ]\n      }\n    ]\n  }\n} ";

function prettyList(ss) {
  var loop = function (ss) {
    if (ss) {
      var ss$1 = ss[1];
      var s = ss[0];
      if (ss$1) {
        return s + (", " + loop(ss$1));
      } else {
        return s;
      }
    } else {
      return "";
    }
  };
  return "[" + (loop(ss) + "]");
}

function prettierList(ss) {
  if (ss) {
    var ss$1 = ss[1];
    var s = ss[0];
    if (ss$1) {
      return s + (" " + prettierList(ss$1));
    } else {
      return s;
    }
  } else {
    return "";
  }
}

function interleave(xs, ys) {
  if (xs) {
    return /* :: */[
            xs[0],
            interleave(ys, xs[1])
          ];
  } else {
    return ys;
  }
}

function kNodePretty(k) {
  if (k.tag) {
    return prettierList(interleave(k[0], List.map(kNodePretty, k[1])));
  } else {
    return k[0];
  }
}

function cleanLabel(s) {
  var suffix = "_LAMBDA";
  if (s.endsWith(suffix)) {
    return s.substring(0, s.length - suffix.length | 0);
  } else {
    return s;
  }
}

function kNode(param) {
  return (function (param) {
      return Json_decode.andThen((function (s) {
                    switch (s) {
                      case "KApply" : 
                          return kApply;
                      case "KToken" : 
                          return kToken;
                      default:
                        return Pervasives.failwith("Unknown node type");
                    }
                  }), (function (param) {
                    return Json_decode.field("node", Json_decode.string, param);
                  }), param);
    });
}

function kApply(json) {
  var partial_arg = kNode(/* () */0);
  return /* Apply */Block.__(1, [
            $$Array.to_list(cleanLabel(Json_decode.field("label", Json_decode.string, json)).split("_")),
            Json_decode.field("args", (function (param) {
                    return Json_decode.list(partial_arg, param);
                  }), json)
          ]);
}

function kToken(json) {
  return /* Token */Block.__(0, [Json_decode.field("token", Json_decode.string, json)]);
}

function kAst(json) {
  return Json_decode.field("term", kNode(/* () */0), json);
}

var IdDecode = /* module */[
  /* kNode */kNode,
  /* kApply */kApply,
  /* kToken */kToken,
  /* kAst */kAst
];

var idDecoded = kAst(Json.parseOrRaise(idJson));

function handleClick(_event) {
  console.log(kNodePretty(idDecoded));
  return /* () */0;
}

function ParseKAST(Props) {
  return React.createElement("div", {
              onClick: handleClick
            }, "foo bar");
}

var make = ParseKAST;

exports.Decode = Decode;
exports.data = data;
exports.line = line$1;
exports.idJson = idJson;
exports.prettyList = prettyList;
exports.prettierList = prettierList;
exports.interleave = interleave;
exports.kNodePretty = kNodePretty;
exports.cleanLabel = cleanLabel;
exports.IdDecode = IdDecode;
exports.idDecoded = idDecoded;
exports.handleClick = handleClick;
exports.make = make;
/* line Not a pure module */
